# -*- coding: utf-8 -*-
"""Untitled29.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J2mawEXbWRf8aC_RZEsFLZbXmrQL1GZ5
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler

dataset_url = "/content/sample_data/customerdata.csv"
df = pd.read_csv(dataset_url)
# Display the first few rows of the dataset
print("First 5 rows of the dataset:")
print(df.head())
# Display basic information about the dataset
print("\nDataset Info:")
print(df.info())
#Check for missing values
print("\nMissing Values in Dataset:")
print(df.isnull().sum())

features = df[['sepal_length', 'sepal_width', 'petal_length']] # Assign the selected columns to the variable 'features'
# Standardize the data
scaler = StandardScaler()
scaled_features = scaler.fit_transform(features)
# Display the first few rows of the standardized data
print("\nFirst 5 rows of scaled features:")
print(scaled_features[:5])

inertia = []
k_range = range(1, 11)
for k in k_range:
    kmeans = KMeans(n_clusters=k, random_state=42) # Indented this line
    kmeans.fit(scaled_features)
    inertia.append(kmeans.inertia_)
# Plot the Elbow Method graph
plt.figure(figsize=(8, 5))
plt.plot(k_range, inertia, marker='o')
plt.title('Elbow Method for Optimal k')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('Inertia') # Corrected the typo here from 'vlabel' to 'ylabel'
plt.xticks(k_range)
plt.show()

optimal_k = 3
kmeans = KMeans (n_clusters=optimal_k, random_state=42)
cluster_labels = kmeans.fit_predict(scaled_features)
# Add cluster labels to the original dataset
df['Cluster'] = cluster_labels
# Display the first few rows with cluster labels
print("\nFirst 5 rows with cluster labels:")
print(df.head())

plt.figure(figsize=(8, 6))
sns.scatterplot(x=scaled_features [:, 0], y=scaled_features[:, 1], hue=cluster_labels, palette='viridis', s=100)
plt.scatter(kmeans.cluster_centers_ [:, 0], kmeans.cluster_centers_[:, 1],s=300, c='red', label='Centroids') # Updated to cluster_centers_
plt.title('Customer Segments')
plt.xlabel('Feature 1 (scaled)')
plt.ylabel('Feature 2 (scaled)')
plt.legend()
plt.show()

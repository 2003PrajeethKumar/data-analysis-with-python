# -*- coding: utf-8 -*-
"""Untitled28.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gBuMrCHNzzQhLZcW5-DcJlPn87tUQRpP
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
# Load the dataset
df = pd.read_csv('/content/sample_data/NSE-TATAGLOBAL.csv')
print("First 5 rows of the dataset:")
display(df.head())
print("\nDataset Information:")
df.info()
print("\nDataset Description:")
display(df.describe())
duplicates = df.duplicated().sum()
print(f"Number of duplicate rows: {duplicates}")
# Remove duplicates
df = df.drop_duplicates()
# Handle missing values
print(f"Missing values before cleaning:\n{df.isnull().sum()}")
# Fill missing numerical values with column mean
df.fillna(df.mean(numeric_only=True), inplace=True)
print(f"Missing values after cleaning:\n{df.isnull().sum()}")
# Convert 'Date' column to datetime formate
df['Date'] = pd.to_datetime(df['Date'])
print("\nData after cleaning:")
display(df.head())
# Rename the 'Close' column to 'Sales' for the plot (important change)
df.rename(columns={'Close': 'Sales'}, inplace=True)
plt.figure(figsize=(10, 6))
df.groupby('Date')['Sales'].sum().plot(kind='line', color='blue')
plt.title('Sales Trend Over Time')
plt.xlabel('Date')
plt.ylabel('Total Sales')
plt.show()
plt.figure(figsize=(8, 6))
sns.scatterplot(x='Low', y='High', data=df, color='orange')
plt.title('High vs Low Price')
plt.xlabel('Low')
plt.ylabel('High')
plt.show()
# Heatmap for correlations
plt.figure(figsize=(8, 6))
sns.heatmap(df.corr(numeric_only=True), annot=True, cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()
# Linear Regression Model
if 'High' in df.columns and 'Low' in df.columns:
    X = df[['High', 'Low']]
    y = df['Sales']
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    # Train the Linear Regression model
    model = LinearRegression()
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    print(f"Mean Squared Error: {mean_squared_error(y_test, y_pred):.2f}")
    print(f"R-squared Score: {r2_score(y_test, y_pred):.2f}")
else:
    print("The dataset does not contain 'High' and 'Low' columns, which are needed for linear regression.")